# Generated by Django 3.2.11 on 2022-01-17 11:35

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunSQL('''
            -- Time slot participation is paid with a Bill
            CREATE TABLE "Bill"
            (
                "id_bill"           INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_payment_method" INTEGER  NOT NULL,
                "billed_at"         DATETIME NOT NULL,
                "price"             DECIMAL  NOT NULL,
                "payment_confirmed" BOOLEAN  NOT NULL, -- if paid with a bank transfer, Tutor has to manually confirm whether money has arrived
                FOREIGN KEY ("id_payment_method") REFERENCES paymentmethod ("id_payment_method") -- removing a payment method while in use shouldn't be possible
            );
            
            -- Account of Tutor or Participant
            CREATE TABLE "User"
            (
                "id_user"        INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_role"        INTEGER NOT NULL,
                "id_grade_level" INTEGER,
                "id_contact"     INTEGER NOT NULL, -- contact info
                "first_name"     TEXT    NOT NULL,
                "last_name"      TEXT    NOT NULL,
                "date_of_birth"  DATETIME,
                FOREIGN KEY ("id_role") REFERENCES role ("id_role"), -- prevent removing roles while in use
                FOREIGN KEY ("id_grade_level") REFERENCES gradelevel ("id_grade_level"), -- if GradeLevel removed, prevent removing User. this field should be updated with a new GradeLevel
                FOREIGN KEY ("id_contact") REFERENCES contact ("id_contact") -- prevent removing Contact in use because it's an integral part of user account
            );
            
            -- Ratings on Tutoring can be disputed by Tutors
            CREATE TABLE "RatingDispute"
            (
                "id_rating_dispute" INTEGER NOT NULL,
                "id_rating"         INTEGER NOT NULL,
                "reason"            TEXT    NOT NULL,
                "is_reviewed"       BOOLEAN NOT NULL, -- admin will review, if reviewed then Rating is hidden
                FOREIGN KEY ("id_rating") REFERENCES rating ("id_rating") ON DELETE CASCADE -- remove RatingDisputes when removing Ratings
            );
            
            -- Working method of a participant
            CREATE TABLE "TutoringParticipant_WorkingMethod"
            (
                "id_tutoring_participant_working_method" INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_tutoring_participant"                INTEGER NOT NULL,
                "id_working_method"                      INTEGER NOT NULL,
                "completed"                              BOOLEAN NOT NULL, -- Tutor can mark whether a working method has been completed
                FOREIGN KEY ("id_tutoring_participant") REFERENCES tutoringparticipant ("id_tutoring_participant") ON DELETE CASCADE, -- when removing TutoringParticipant, remove his progress
                FOREIGN KEY ("id_working_method") REFERENCES workingmethod ("id_working_method") -- prevent removing WorkingMethods while in use
            );
            
            -- User's role
            CREATE TABLE "Role"
            (
                "id_role" INTEGER PRIMARY KEY AUTOINCREMENT,
                "code"    TEXT NOT NULL,
                "name"    TEXT NOT NULL
            );
            
            -- Available timeslots can be hidden from joining
            CREATE TABLE "TimeslotHideRule"
            (
                "id_timeslot_hide_rule"       INTEGER PRIMARY KEY AUTOINCREMENT,
                "total_income_threshold"      DECIMAL, -- if set, hide any available slots if total income in a month has reached this
                "taken_slots_ratio_threshold" DECIMAL  -- if set, hide any available slots if a ratio of taken slots has reached this
            );
            
            -- School subject, for example Mathematics
            CREATE TABLE "Subject"
            (
                "id_subject" INTEGER PRIMARY KEY AUTOINCREMENT,
                "name"       TEXT NOT NULL
            );
            
            -- School type/level, for example Primary School
            CREATE TABLE "SchoolType"
            (
                "id_school_type" INTEGER PRIMARY KEY AUTOINCREMENT,
                "name"           TEXT NOT NULL
            );
            
            -- Tutoring medium, it can be "In person", "Discord"
            CREATE TABLE "Medium"
            (
                "id_medium"   INTEGER PRIMARY KEY AUTOINCREMENT,
                "name"        TEXT NOT NULL,
                "description" TEXT,
                "is_remote"   BOOLEAN
            );
            
            -- Bill can be paid with different payment methods, for example with "Cash" or "Bank transfer"
            CREATE TABLE "PaymentMethod"
            (
                "id_payment_method" INTEGER PRIMARY KEY AUTOINCREMENT,
                "name"              TEXT NOT NULL,
                "description"       TEXT NOT NULL -- holds details about the method, for example the bank account number
            );
            
            -- User who is attending some Tutoring classes
            CREATE TABLE "TutoringParticipant"
            (
                "id_tutoring_participant" INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_user"                 INTEGER NOT NULL,
                FOREIGN KEY ("id_user") REFERENCES user ("id_user") ON DELETE CASCADE -- when removing User, remove his Participation in Tutorings
            );
            
            --
            CREATE TABLE "DiscountRule"
            (
                "id_discount_rule" INTEGER PRIMARY KEY AUTOINCREMENT,
                "code"             TEXT NOT NULL,
                "name"             TEXT NOT NULL
            );
            
            CREATE TABLE "Timeslot"
            (
                "id_timeslot"                 INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_tutoring"                 INTEGER  NOT NULL,
                "id_medium"                   INTEGER  NOT NULL,
                "takes_place_at"              DATETIME NOT NULL,
                "allow_multiple_participants" BOOLEAN  NOT NULL,
                "timeslot_mins"               INTEGER  NOT NULL, -- duration of this time slot in minutes
                FOREIGN KEY ("id_tutoring") REFERENCES tutoring ("id_tutoring") ON DELETE CASCADE, -- when removing Tutoring, remove all Timeslots as well
                FOREIGN KEY ("id_medium") REFERENCES medium ("id_medium") -- prevent removing Mediums while in use
            );
            
            CREATE TABLE "Rating"
            (
                "id_rating"   INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_tutoring" INTEGER NOT NULL,
                "rate"        INTEGER NOT NULL,
                "comment"     TEXT,
                FOREIGN KEY ("id_tutoring") REFERENCES tutoring ("id_tutoring") ON DELETE CASCADE -- remove all Ratings when removing Tutorings
            );
            
            -- Description of a Tutoring class visible publicly
            CREATE TABLE "Description"
            (
                "id_description" INTEGER PRIMARY KEY AUTOINCREMENT,
                "banner_url"     TEXT,
                "description"    TEXT
            );
            
            -- School grade of the Participant, for example "IV"
            CREATE TABLE "GradeLevel"
            (
                "id_grade_level" INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_school_type" INTEGER NOT NULL,
                "grade_number"   INTEGER NOT NULL,
                FOREIGN KEY ("id_school_type") REFERENCES schooltype ("id_school_type") ON DELETE CASCADE -- remove Grades when removing SchoolType
            );
            
            CREATE TABLE "Contact"
            (
                "id_contact"          INTEGER PRIMARY KEY AUTOINCREMENT,
                "email"               TEXT,
                "phone_number"        TEXT,
                "parent_email"        TEXT,
                "parent_phone_number" TEXT,
                "description"         TEXT
            );
            
            -- The scope of the classes. For example "Equalizing classes", "Extracurricular classes", "Along with the program"
            CREATE TABLE "TutoringScope"
            (
                "id_tutoring_scope" INTEGER PRIMARY KEY AUTOINCREMENT,
                "name"              TEXT NOT NULL
            );
            
            -- Book that Participant uses in school
            CREATE TABLE "Book"
            (
                "id_book" INTEGER PRIMARY KEY AUTOINCREMENT,
                "name"    TEXT NOT NULL,
                "author"  TEXT
            );
            
            -- Special educational need of a Participant
            CREATE TABLE "SpecialNeed"
            (
                "id_special_need" INTEGER PRIMARY KEY AUTOINCREMENT,
                "name"            TEXT NOT NULL
            );
            
            -- describes the discount and when it is available
            CREATE TABLE "Discount"
            (
                "id_discount"          INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_tutoring"          INTEGER NOT NULL,
                "id_discount_rule"     INTEGER NOT NULL,
                "new_price_multiplier" DECIMAL NOT NULL, -- for example 0.5 means a 50% discount
                "due_date"             DATETIME,         -- when does the Discount end? if NULL, then never
                "consumed_count"       INTEGER NOT NULL, -- how many people used this Discount so far
                "max_consumed_count"   INTEGER,          -- how many people can use this Discount? if NULL, then unlimited
                FOREIGN KEY ("id_tutoring") REFERENCES tutoring ("id_tutoring") ON DELETE CASCADE, -- clean up Discounts when removing Tutorings
                FOREIGN KEY ("id_discount_rule") REFERENCES discountrule ("id_discount_rule") -- prevent removing DiscountRules while in use
            );
            
            -- a task for the Participant, for example "Kahoot quiz"
            CREATE TABLE "WorkingMethod"
            (
                "id_working_method" INTEGER PRIMARY KEY AUTOINCREMENT,
                "name"              TEXT NOT NULL,
                "description"       TEXT NOT NULL
            );
            
            -- describes who has joined the timeslot and how was it paid
            CREATE TABLE "Timeslot_TutoringParticipant"
            (
                "id_timeslot_tutoring_participant" INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_timeslot"                      INTEGER NOT NULL,
                "id_tutoring_participant"          INTEGER NOT NULL,
                "id_bill"                          INTEGER NOT NULL,
                FOREIGN KEY ("id_timeslot") REFERENCES timeslot ("id_timeslot"), -- prevent removing Timeslots with Participants
                FOREIGN KEY ("id_tutoring_participant") REFERENCES tutoringparticipant ("id_tutoring_participant") ON DELETE CASCADE, -- if Participants are removed, 'eject' them from their Timeslots
                FOREIGN KEY ("id_bill") REFERENCES bill ("id_bill") -- prevent removing Bills while in use
            );
            
            -- Users can specify their special educational needs
            CREATE TABLE "User_SpecialNeed"
            (
                "id_user_special_need" INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_user"              INTEGER NOT NULL,
                "id_special_need"      INTEGER NOT NULL,
                FOREIGN KEY ("id_user") REFERENCES user ("id_user") ON DELETE CASCADE, -- when Users are deleted, remove their connection to SpecialNeeds
                FOREIGN KEY ("id_special_need") REFERENCES specialneed ("id_special_need") -- prevent removing SpecialNeeds if in use
            );
            
            -- Participants can cancel a Time Slot participation and free them up for others
            CREATE TABLE "Cancellation"
            (
                "id_cancellation"                  INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_timeslot_tutoring_participant" INTEGER NOT NULL,
                "approved"                         BOOLEAN NOT NULL, -- Tutor has to approve the cancellation
                FOREIGN KEY ("id_timeslot_tutoring_participant") REFERENCES timeslot_tutoringparticipant ("id_timeslot_tutoring_participant") -- Cancellation should be used instead of deleting Timeslot_TutoringParticipant, so prevent it
            );
            
            -- Tutors can describe for example "Analytical skills" of a Participant
            CREATE TABLE "Attribute"
            (
                "id_attribute" INTEGER PRIMARY KEY AUTOINCREMENT,
                "name"         TEXT NOT NULL
            );
            
            -- Tutor can put a note on a Participant
            CREATE TABLE "TeachingNote"
            (
                "id_teaching_note"        INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_tutoring_participant" INTEGER NOT NULL,
                "note"                    TEXT    NOT NULL,
                FOREIGN KEY ("id_tutoring_participant") REFERENCES tutoringparticipant ("id_tutoring_participant") ON DELETE CASCADE -- remove personal info after user has been deleted
            );
            
            -- Holds information about Tutoring classes
            CREATE TABLE "Tutoring"
            (
                "id_tutoring"           INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_teacher"            INTEGER NOT NULL,
                "id_tutoring_scope"     INTEGER NOT NULL,
                "id_subject"            INTEGER NOT NULL,
                "id_book"               INTEGER,
                "id_description"        INTEGER NOT NULL,
                "id_timeslot_hide_rule" INTEGER NOT NULL,
                "name"                  TEXT    NOT NULL, -- name of the classes
                "timeslot_mins"         INTEGER NOT NULL, -- duration of a time slot in minutes
                "price_for_timeslot"    INTEGER NOT NULL, -- price per timeslot
                FOREIGN KEY ("id_teacher") REFERENCES user ("id_user"), -- prevent deleting Teacher with active Tutorings
                FOREIGN KEY ("id_tutoring_scope") REFERENCES tutoringscope ("id_tutoring_scope"), -- prevent deleting TutoringScope while in use
                FOREIGN KEY ("id_subject") REFERENCES subject ("id_subject"), -- prevent deleting Subject while in use
                FOREIGN KEY ("id_book") REFERENCES book ("id_book"), -- prevent deleting Book while in use
                FOREIGN KEY ("id_description") REFERENCES description ("id_description"), -- prevent deleting Description when used in a Tutoring
                FOREIGN KEY ("id_timeslot_hide_rule") REFERENCES timeslothiderule ("id_timeslot_hide_rule") -- prevent deleting TimeslotHideRule while in use
            );
            
            -- Assignment of an attribute to a participant
            CREATE TABLE "TutoringParticipant_Attribute"
            (
                "id_tutoring_participant_attribute" INTEGER PRIMARY KEY AUTOINCREMENT,
                "id_tutoring_participant"           INTEGER NOT NULL,
                "id_attribute"                      INTEGER NOT NULL,
                "value"                             TEXT    NOT NULL,
                FOREIGN KEY ("id_tutoring_participant") REFERENCES tutoringparticipant ("id_tutoring_participant") ON DELETE CASCADE, -- remove personal details when deleting TutoringParticipant
                FOREIGN KEY ("id_attribute") REFERENCES attribute ("id_attribute") -- prevent deleting attribute while in use
            );
            
            CREATE INDEX idx_id_payment_method ON paymentmethod ("id_payment_method");
            CREATE INDEX idx_id_role ON role ("id_role");
            CREATE INDEX idx_id_grade_level ON gradelevel ("id_grade_level");
            CREATE INDEX idx_id_contact ON contact ("id_contact");
            CREATE INDEX idx_id_rating ON rating ("id_rating");
            CREATE INDEX idx_id_user ON user ("id_user");
            CREATE INDEX idx_id_tutoring_participant ON tutoringparticipant ("id_tutoring_participant");
            CREATE INDEX idx_id_working_method ON workingmethod ("id_working_method");
            CREATE INDEX idx_id_tutoring ON tutoring ("id_tutoring");
            CREATE INDEX idx_id_medium ON medium ("id_medium");
            CREATE INDEX idx_id_school_type ON schooltype ("id_school_type");
            CREATE INDEX idx_id_discount_rule ON discountrule ("id_discount_rule");
            CREATE INDEX idx_id_timeslot ON timeslot ("id_timeslot");
            CREATE INDEX idx_id_bill ON bill ("id_bill");
            CREATE INDEX idx_id_special_need ON specialneed ("id_special_need");
            CREATE INDEX idx_id_timeslot_tutoring_participant ON timeslot_tutoringparticipant ("id_timeslot_tutoring_participant");
            CREATE INDEX idx_id_tutoring_scope ON tutoringscope ("id_tutoring_scope");
            CREATE INDEX idx_id_subject ON subject ("id_subject");
            CREATE INDEX idx_id_book ON book ("id_book");
            CREATE INDEX idx_id_description ON description ("id_description");
            CREATE INDEX idx_id_timeslot_hide_rule ON timeslothiderule ("id_timeslot_hide_rule");
            CREATE INDEX idx_id_attribute ON attribute ("id_attribute");
        ''')
    ]
